
Concepto 1: Introducción a React
Aprende React Desde Cero-ejemplos con publicidad fee code camp
        https://www.youtube.com/watch?v=6Jfk8ic3KVk

<introduccion>
    
        React es una biblioteca de JavaScript para construir interfaces de usuario, especialmente para aplicaciones de una sola página. 
        Fue desarrollada por Facebook y lanzada en 2013. 
        React permite crear componentes reutilizables que gestionan su propio estado.
    
    <caracteristicas>
        
            Algunas características clave de React incluyen:
        
        
            Component-Based: React se basa en componentes, lo que permite construir interfaces de usuario complejas a partir de piezas pequeñas y aisladas.
            Declarative: React permite describir cómo debería verse la interfaz de usuario en un estado dado, y se encarga de actualizarla cuando el estado cambia.
            Virtual DOM: React utiliza un DOM virtual para mejorar el rendimiento al minimizar las manipulaciones directas del DOM real.
            Unidirectional Data Flow: React sigue un flujo de datos unidireccional, lo que facilita la gestión del estado y la depuración.
        
    </caracteristicas>
</introduccion>

Concepto 2: Componentes
<componentes>
    
        
            Los componentes son las piezas fundamentales de una aplicación React. Pueden ser clases o funciones que devuelven elementos de React.
        
        <ejemplo>`
        
            // Componente de clase
            class MiComponente extends React.Component {
                render() {
                    return <h1>Hola, Mundo!</h1>;
                }
            }
            
            // Componente funcional
            function MiComponente() {
                return <h1>Hola, Mundo!</h1>;
            }
        
        `</ejemplo>
    
</componentes>

Concepto 3: JSX
<jsx>
    
        JSX es una extensión de sintaxis para JavaScript que permite escribir código similar a HTML dentro de JavaScript. JSX se compila en llamadas a `React.createElement`.
    
    <ejemplo>`
        const elemento = <h1>Hola, Mundo!</h1>;
    `</ejemplo>
</jsx>
Concepto 4: Props y Estado
<propsYEstado>
    <props>
        
            Las props (propiedades) son argumentos que se pasan a los componentes de React. Son inmutables y permiten pasar datos de un componente padre a un componente hijo.
        
        <ejemplo>`
            function Saludo(props) {
                return <h1>Hola, {props.nombre}!</h1>;
            }
            
            // Uso del componente Saludo
            <Saludo nombre="Juan" />
        `</ejemplo>
    </props>
    
    <estado>
        
            El estado es un objeto que representa la parte de los datos que puede cambiar en un componente. A diferencia de las props, el estado es mutable y se gestiona dentro del componente.
        
        <ejemplo>`
            class Contador extends React.Component {
                constructor(props) {
                    super(props);
                    this.state = { contador: 0 };
                }
                
                incrementar = () => {
                    this.setState({ contador: this.state.contador + 1 });
                }
                
                render() {
                    return (
                        <div>
                            <p>Contador: {this.state.contador}</p>
                            <button onClick={this.incrementar}>Incrementar</button>
                        </div>
                    );
                }
            }
        `</ejemplo>
    </estado>
</propsYEstado>


Concepto 5: Ciclo de Vida de los Componentes
<cicloDeVida>
    
        Los componentes de clase en React tienen métodos de ciclo de vida que permiten ejecutar código en diferentes etapas del ciclo de vida de un componente, 
        como cuando se monta, se actualiza o se desmonta.
    
    <ejemplo>`
        class MiComponente extends React.Component {
            componentDidMount() {
                // Código que se ejecuta después de que el componente se monta
            }
            
            componentDidUpdate(prevProps, prevState) {
                // Código que se ejecuta después de que el componente se actualiza
            }
            
            componentWillUnmount() {
                // Código que se ejecuta justo antes de que el componente se desmonte
            }
            
            render() {
                return <h1>Hola, Mundo!</h1>;
            }
        }
    `</ejemplo>
</cicloDeVida>

Concepto 6: Hooks
<hooks>
        
            Los hooks son una nueva adición en React 16.8 que permiten usar estado y otras características de React sin escribir una clase. 
            Aquí tienes una lista de los hooks más comunes:
        
        
            
                useState

                Permite añadir estado a componentes funcionales.
                <ejemplo>`
                    const [state, setState] = useState(initialState);
                `</ejemplo>
            
            
                useEffect

                Permite realizar efectos secundarios en componentes funcionales.
                <ejemplo>`
                    useEffect(() => {
                        // Código a ejecutar
                        return () => {
                            // Código de limpieza
                        };
                    }, [dependencies]);
                `</ejemplo>
            
            
                useContext

                Permite acceder al valor de un contexto.
                <ejemplo>`
                    const value = useContext(MyContext);
                `</ejemplo>
            
            
                useReducer

                Una alternativa a `useState` para manejar estados más complejos.
                <ejemplo>`
                    const [state, dispatch] = useReducer(reducer, initialState);
                `</ejemplo>
            
            
                useCallback

                Memoriza funciones para evitar recrearlas en cada renderizado.
                <ejemplo>`
                    const memoizedCallback = useCallback(() => {
                        // Código a memorizar
                    }, [dependencies]);
                `</ejemplo>
            
            
                useMemo

                Memoriza valores calculados para evitar recalcularlos en cada renderizado.
                <ejemplo>`
                    const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
                `</ejemplo>
            
            
                useRef

                Permite crear referencias mutables que persisten entre renderizados.
                <ejemplo>`
                    const refContainer = useRef(initialValue);
                `</ejemplo>
            
            
                useImperativeHandle

                Personaliza la instancia de un ref expuesto a componentes padres.
                <ejemplo>`
                    useImperativeHandle(ref, () => ({
                        // Métodos expuestos
                    }), [dependencies]);
                `</ejemplo>
            
            
                useLayoutEffect

                Similar a `useEffect`, pero se ejecuta de manera sincrónica después de todas las mutaciones del DOM.
                <ejemplo>`
                    useLayoutEffect(() => {
                        // Código a ejecutar
                    }, [dependencies]);
                `</ejemplo>
            
            
                useDebugValue

                Muestra una etiqueta en las herramientas de desarrollo de React para facilitar la depuración.
                <ejemplo>`
                    useDebugValue(value);
                `</ejemplo>
            
        
    </hooks>


Concepto 7: Manejo de Eventos
<manejoDeEventos>
    
        React maneja eventos de manera similar a como se manejan en el DOM, pero con algunas diferencias sintácticas. 
        Los eventos en React se nombran usando camelCase y se pasan como funciones.
    
    <ejemplo>
        function Boton() {
            function manejarClick() {
                alert('Botón clickeado');
            }
            
            return (
                <button onClick={manejarClick}>Haz clic aquí</button>
            );
        }
    </ejemplo>
</manejoDeEventos>


<flux>
        
            Flux es un patrón de arquitectura para manejar el flujo de datos en aplicaciones de React. Fue introducido por Facebook y se basa en un flujo de datos unidireccional.
        
        <componentes>
            
                
                    Dispatcher

                    El Dispatcher es un centro de distribución que envía las acciones a los stores.
                
                
                    Stores

                    Los Stores contienen el estado y la lógica de la aplicación. Escuchan las acciones del Dispatcher y actualizan su estado en consecuencia.
                
                
                    Actions

                    Las Actions son objetos que contienen información sobre una acción que se ha realizado, como un evento del usuario.
                
                
                    Views

                    Las Views son componentes de React que escuchan los cambios en los Stores y se vuelven a renderizar en consecuencia.
                
            
        </componentes>
    </flux>



    <context>
        
            El Contexto de React proporciona una forma de pasar datos a través del árbol de componentes sin tener que pasar props manualmente en cada nivel.
        
        <ejemplo>`
            // Creación de un Contexto
            const MiContexto = React.createContext(valorInicial);
            
            // Proveedor de Contexto
            function ProveedorDeContexto({ children }) {
                const [valor, setValor] = useState(valorInicial);
                
                return (
                    <MiContexto.Provider value={valor}>
                        {children}
                    </MiContexto.Provider>
                );
            }
            
            // Consumidor de Contexto
            function ConsumidorDeContexto() {
                const valor = useContext(MiContexto);
                return <div>{valor}</div>;
            }
        `</ejemplo>
    </context>


<estructura-de-componente>
    <pre>
        <code>
            import React from "react";
            // aqui importaciones
            
            const Componente = () => {
                // aqui Logica JS
            
                return (
                    <React.Fragment>
                        {/* aqui HTML con pijadillas */}
                        {/* class => className */}
                        {/* cierre de etiquetas especial */}
                        <img />
                        <input />
                        <hr className="dropdown-divider" />
                    </React.Fragment>
                );
            };
            
            export default Componente;
        </code>
    </pre>
</estructura-de-componente>



<elementos> <pre>
    <code>

        Fragment: Se usa para agrupar una lista de hijos sin agregar nodos adicionales al DOM.

                <React.Fragment>
                    <Child1 />
                    <Child2 />
                </React.Fragment>

        StrictMode: Ayuda a identificar problemas potenciales en la aplicación. 
        Solo se activa en modo de desarrollo.

                <React.StrictMode>
                     <App />
                </React.StrictMode>

        Suspense: Permite mostrar un fallback mientras se carga un componente asíncrono.

                <React.Suspense fallback={<div>Loading...</div>}>
                    <LazyComponent />
                </React.Suspense>

        Profiler: Mide el rendimiento de los componentes.

                <React.Profiler id="App" onRender={callback}>
                    <App />
                </React.Profiler>

        Portals: Permiten renderizar hijos en un nodo del DOM que existe fuera de la jerarquía del DOM del componente padre.

                ReactDOM.createPortal(
                    <Child />,
                document.getElementById('portal-root')
                );



        Self-Closing Tags: En React, las etiquetas que no tienen hijos deben ser auto-cerradas. 
                Por ejemplo:

                <img src="image.jpg" alt="description" />
                <input type="text" />
                <br />


        JSX Expressions: Puedes incluir expresiones JavaScript dentro de JSX usando llaves {}.

                const name = "John";
                <h1>Hello, {name}!</h1>


        Event Handling: Los eventos en React se nombran usando camelCase en lugar de minúsculas.

                <button onClick={handleClick}>Click me</button>



        Attributes: Algunos atributos HTML tienen nombres diferentes en React:

                class se convierte en className
                for se convierte en htmlFor
                tabindex se convierte en tabIndex


        Fragments: Como mencionamos antes, puedes usar <React.Fragment> o su forma abreviada <> </> para agrupar elementos sin agregar nodos adicionales al DOM.

                <React.Fragment>
                        <Child1 />
                        <Child2 />
                </React.Fragment>


        Conditional Rendering: Puedes usar operadores ternarios o && para renderizar condicionalmente.

                {isLoggedIn ? <LogoutButton /> : <LoginButton />}
                {messages.length > 0 && <MessageList messages={messages} />}


        Lists and Keys: Cuando renderizas listas de elementos, cada elemento debe tener una key única.

                const items = ['Item1', 'Item2', 'Item3'];
                <ul>
                        {items.map((item, index) => (
                                <li key={index}>{item}</li>
                        ))}
                </ul>


        Refs: Para acceder directamente a un DOM element o a un componente, puedes usar refs.

                const myRef = React.createRef();
                <div ref={myRef}></div>
            </code>
        </pre>
</elementos>

<hooks>
        useState
                El hook useState te permite añadir estado a tus componentes funcionales. 
                Es una forma de mantener y actualizar valores a lo largo del ciclo de vida del componente.

                Ejemplo detallado:
                <pre>
                    <code>

                        import React, { useState } from 'react';

                        function Counter() {
                        // Declaramos una variable de estado llamada "count" y una función para actualizarla llamada "setCount"
                        const [count, setCount] = useState(0);

                        return (
                        <div>
                        <p>You clicked {count} times</p>
                        <button onClick={() => setCount(count + 1)}>
                                Click me
                        </button>
                        </div>
                        );
                        }
                    </code>
                </pre>



        useEffect
                El hook useEffect te permite realizar efectos secundarios en tus componentes funcionales. 
                Puedes pensar en él como una combinación de componentDidMount, componentDidUpdate y componentWillUnmount en componentes de clase.

                Ejemplo detallado:
                <pre>
                    <code>

                        import React, { useEffect, useState } from 'react';

                        function DataFetcher() {
                        const [data, setData] = useState(null);

                        useEffect(() => {
                        // Realizamos una petición HTTP cuando el componente se monta
                        fetch('https://api.example.com/data')
                        .then(response => response.json())
                        .then(data => setData(data));
                        }, []); // El array vacío significa que este efecto solo se ejecuta una vez, al montar el componente

                        return (
                        <div>
                        {data ? <p>{data}</p> : <p>Loading...</p>}
                        </div>
                        );
                        }
                    </code>
                </pre>


        useContext
                El hook useContext te permite acceder al contexto de React, que es una forma de pasar datos a través del árbol de componentes sin tener que pasar props manualmente en cada nivel.

                Ejemplo detallado:
                <pre>
                    <code>

                        import React, { useContext } from 'react';

                        const MyContext = React.createContext();

                        function MyComponent() {
                        const value = useContext(MyContext);

                        return <div>{value}</div>;
                        }

                        function App() {
                        return (
                        <MyContext.Provider value="Hello, World!">
                        <MyComponent />
                        </MyContext.Provider>
                        );
                        }
                    </code>
                </pre>


        useReducer
                El hook useReducer es una alternativa a useState para manejar estados más complejos. 
                Es similar a cómo funcionan los reducers en Redux.

                Ejemplo detallado:
                <pre>
                    <code>

                import React, { useReducer } from 'react';

                const initialState = { count: 0 };

                        function reducer(state, action) {
                        switch (action.type) {
                        case 'increment':
                        return { count: state.count + 1 };
                        case 'decrement':
                        return { count: state.count - 1 };
                        default:
                        throw new Error();
                        }
                        }

                        function Counter() {
                        const [state, dispatch] = useReducer(reducer, initialState);

                        return (
                        <div>
                        <p>Count: {state.count}</p>
                        <button onClick={() => dispatch({ type: 'increment' })}>+</button>
                        <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
                        </div>
                        );
                        }
                    </code>
                </pre>


        useRef
                El hook useRef te permite crear una referencia mutable que persiste durante todo el ciclo de vida del componente. 
                Es útil para acceder directamente a elementos del DOM o para mantener cualquier valor mutable.

                Ejemplo detallado:
                <pre>
                    <code>

                        import React, { useRef } from 'react';

                        function TextInputWithFocusButton() {
                        const inputEl = useRef(null);

                        const onButtonClick = () => {
                        inputEl.current.focus();
                        };

                        return (
                        <div>
                        <input ref={inputEl} type="text" />
                        <button onClick={onButtonClick}>Focus the input</button>
                        </div>
                        );
                        }
                    </code>
                </pre>


        useMemo y useCallback
                Estos hooks te permiten optimizar el rendimiento de tus componentes al memorizar valores y funciones.

                        Ejemplo detallado de useMemo:

                        import React, { useMemo } from 'react';

                        function ExpensiveCalculationComponent({ num }) {
                        const result = useMemo(() => {
                        // Simula una operación costosa
                        return num * 2;
                        }, [num]);

                        return <div>Result: {result}</div>;
                        }
                Ejemplo detallado de useCallback:
                <pre>
                    <code>

                        import React, { useCallback } from 'react';

                        function Button({ onClick }) {
                        return <button onClick={onClick}>Click me</button>;
                        }

                        function ParentComponent() {
                        const handleClick = useCallback(() => {
                        console.log('Button clicked');
                        }, []);

                        return <Button onClick={handleClick} />;
                }
            </code>
        </pre>
</hooks>

<API>
        APIs de React
        Componentes de Clase y Funcionales:

                 Componentes de Clase: Utilizan la sintaxis de clases de ES6 y tienen acceso a métodos del ciclo de vida como componentDidMount, componentDidUpdate, etc.
                 Componentes Funcionales: Son funciones de JavaScript que aceptan props y devuelven elementos de React.
                         Con la introducción de los hooks, los componentes funcionales pueden manejar estado y efectos secundarios.

        Hooks:

                useState: Para manejar el estado en componentes funcionales.
                useEffect: Para manejar efectos secundarios como peticiones HTTP, suscripciones, etc.
                useContext: Para acceder al contexto de React.
                useReducer: Para manejar estados más complejos.
                useRef: Para crear referencias mutables.
                useMemo y useCallback: Para optimizar el rendimiento.

        Context API:

                Permite pasar datos a través del árbol de componentes sin tener que pasar props manualmente en cada nivel. Es útil para temas, usuarios autenticados, etc.
                APIs Externas

        REST APIs:

                Utilizan HTTP para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar). Las peticiones se hacen generalmente con fetch o bibliotecas como axios.
                Ejemplo:
                        useEffect(() => {
                        fetch('https://api.example.com/data')
                        .then(response => response.json())
                        .then(data => setData(data));
                        }, []);

        GraphQL APIs:

                Permiten realizar consultas más flexibles y específicas. En lugar de múltiples endpoints, tienes un único endpoint donde puedes especificar exactamente los datos que necesitas.
                Ejemplo:
                <pre>
                    <code>
                        import { useQuery, gql } from '@apollo/client';

                        const GET_DATA = gql`
                        query {
                        data {
                        id
                        name
                        }
                        }
                        `;

                        function DataFetcher() {
                        const { loading, error, data } = useQuery(GET_DATA);

                        if (loading) return <p>Loading...</p>;
                        if (error) return <p>Error :(</p>;

                        return data.data.map(({ id, name }) => (
                        <div key={id}>
                        <p>{name}</p>
                        </div>
                        ));
                        }
                    </code>
                </pre>


        Firebase:

                Una plataforma de Google que ofrece una base de datos en tiempo real, autenticación, almacenamiento y más. Es muy popular para aplicaciones móviles y web.
                Ejemplo:
                <pre>
                    <code>

                        import firebase from 'firebase/app';
                        import 'firebase/firestore';

                        const db = firebase.firestore();

                        function addData() {
                        db.collection('users').add({
                        first: 'Ada',
                        last: 'Lovelace',
                        born: 1815
                        });
                        }

                    </code>
                </pre>
</API>


<Promesas>
        ¿Qué es una Promesa?
                Una promesa es un objeto que representa la eventual finalización (o falla) de una operación asíncrona y su valor resultante. 
                Es una forma de manejar operaciones que no se completan de inmediato, como solicitudes a una API, temporizadores, o cualquier otra tarea que tome tiempo.
        
        Estados de una Promesa
                Una promesa puede estar en uno de tres estados:
        
                        Pendiente (Pending): La operación asíncrona aún no ha terminado.
                        Cumplida (Fulfilled): La operación asíncrona se completó con éxito.
                        Rechazada (Rejected): La operación asíncrona falló.

        Sintaxis Básica
                Aquí tienes un ejemplo básico de cómo se crea y maneja una promesa en JavaScript:
        
                        let promesa = new Promise((resolve, reject) => {
                        // Simulamos una operación asíncrona con setTimeout
                        setTimeout(() => {
                                let exito = true; // Cambia esto a false para simular un error
                                if (exito) {
                                    resolve("¡Operación exitosa!");
                                } else {
                                    reject("Hubo un error.");
                                }
                                }, 2000);
                        });
                        
                        promesa
                        .then((mensaje) => {
                                console.log(mensaje); // "¡Operación exitosa!"
                        })
                        .catch((error) => {
                                console.error(error); // "Hubo un error."
                        });


        Promesas en React
                En React, las promesas se utilizan comúnmente para manejar operaciones asíncronas como la obtención de datos de una API. 
                Por ejemplo, podrías usar fetch para obtener datos y luego actualizar el estado del componente con los datos recibidos.
                
                Aquí tienes un ejemplo de cómo podrías usar una promesa en un componente funcional de React con useEffect y useState:
        
                        import React, { useState, useEffect } from 'react';
                        
                        function MiComponente() {
                                const [datos, setDatos] = useState(null);
                                const [error, setError] = useState(null);
                        
                                useEffect(() => {
                                        fetch('https://api.example.com/datos')
                                        .then(response => response.json())
                                        .then(data => setDatos(data))
                                        .catch(error => setError(error));
                                }, []);
                                
                                if (error) {
                                        return <div>Error: {error.message}</div>;
                                }
                                
                                if (!datos) {
                                        return <div>Cargando...</div>;
                                }
                                
                                return (
                                <div>
                                        <h1>Datos:</h1>
                                        <pre>{JSON.stringify(datos, null, 2)}</pre>
                                </div>
                                );
                        }
                        
                        export default MiComponente;
        
</Promesas>