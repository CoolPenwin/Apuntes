Variables y tipos de datos:
 JavaScript tiene varios tipos de datos como string, number, boolean, null, undefined y object. Las variables se pueden declarar usando var, let o const.

    var: Tiene alcance global o local para una función, independientemente de su bloque de declaración.

    let: Permite declarar variables limitando su alcance al bloque, declaración, o expresión donde se está usando. A diferencia de var, let no se inicializa con un valor undefined cuando se declara.

    const: Declarar una constante, es decir, una variable cuyo valor no puede ser cambiado una vez que se ha asignado. Al igual que let, el alcance de una constante es el bloque en el que se declara.


            Number: Representa números. Pueden ser enteros o decimales. 
            Por ejemplo, let age = 25; o let average = 15.5;.

            String: Representa texto. Se pueden definir utilizando comillas simples, dobles o invertidas. 
            Por ejemplo, let name = "John"; o let greeting = 'Hello';.

            Boolean: Este tipo de dato solo puede tener dos valores: true (verdadero) o false (falso). Se utilizan principalmente en estructuras de control para determinar el flujo del programa. 
            Por ejemplo, let isMarried = false;.

            Object: Almacena colecciones de datos en pares de clave-valor. Los objetos se definen utilizando llaves {} y los pares de clave-valor se separan por comas. 
            Por ejemplo, let person = {name: "John", age: 30, isMarried: false};.

            Null: Este tipo de dato representa la ausencia intencional de valor y solo tiene un valor posible: null. 
            Por ejemplo, let emptyValue = null;.

            Undefined: Cuando una variable ha sido declarada pero aún no se le ha asignado un valor. 
            Por ejemplo, let test; (aquí, test es undefined).

        Ejemplos
        let name = "John"; // String
        let age = 30; // Number
        let isMarried = false; // Boolean
        let children = ["Alice", "Bob"]; // Object (Array)
        let spouse = null; // Null
        let salary; // Undefined

Operadores:
 JavaScript tiene operadores aritméticos (+, -, *, /, %), operadores de asignación (=, +=, -=, etc.), operadores de comparación (==, !=, ===, !==, <, >, <=, >=) y operadores lógicos (&&, ||, !).


    Operadores aritméticos: Estos operadores se utilizan para realizar operaciones matemáticas. Incluyen operadores como suma (+), resta (-), multiplicación (*), división (/), módulo (%), incremento (++), y decremento (--).

    Operadores de asignación: Estos operadores asignan valores a las variables. El operador de asignación más simple es =. Otros operadores de asignación combinan aritmética y asignación, como +=, -=, *=, y /=.

    Operadores de comparación: Estos operadores se utilizan para comparar dos valores. Incluyen igual a (==), no igual a (!=), igual valor e igual tipo (===), no igual valor o no igual tipo (!==), mayor que (>), menor que (<), mayor o igual que (>=), y menor o igual que (<=).

    Operadores lógicos: Estos operadores se utilizan para determinar la lógica entre variables o valores. Incluyen AND lógico (&&), OR lógico (||), y NOT lógico (!).

    Operadores de tipo: Estos operadores se utilizan para determinar el tipo de una variable. Incluyen typeof (que devuelve el tipo de una variable) y instanceof (que verifica si un objeto es una instancia de un tipo de objeto específico).

    Operadores de bits: Estos operadores se utilizan para trabajar directamente con los bits de los números en JavaScript. Incluyen AND de bits (&), OR de bits (|), XOR de bits (^), NOT de bits (~), desplazamiento a la izquierda (<<), desplazamiento a la derecha (>>), y desplazamiento a la derecha con cero llenado (>>>).

Estructuras de control:
 Las estructuras de control en JavaScript incluyen declaraciones condicionales (if, else if, else, switch) y bucles (for, while, do while).

Funciones:
 Las funciones son bloques de código reutilizables que se pueden definir con la palabra clave function. También existen las funciones de flecha (=>) que son una forma más corta de definir funciones.

Objetos:
 Los objetos en JavaScript son colecciones de propiedades, donde cada propiedad es un par de clave-valor. Los objetos pueden contener datos y métodos.

Arrays:
 Los arrays son objetos utilizados para almacenar múltiples valores en una sola variable.
 En esencia es una lista, tambien tiene otros nombres como Arreglo 

Eventos:
 Los eventos son acciones del usuario que JavaScript puede capturar, como clics del mouse, movimientos del mouse, pulsaciones de teclas, etc.

DOM (Document Object Model):
 El DOM es una interfaz de programación para documentos HTML y XML. Permite a los programas cambiar la estructura, estilo y contenido de una página web.

JSON (JavaScript Object Notation):
 JSON es un formato de datos ligero que es fácil de leer y escribir para los humanos y fácil de analizar y generar para las máquinas.  
  
  
                    ///VARIABLES///
VAR         // variable global  *obsoleta 
 
                //VARIABLES DE BLOQUE
CONST       // "variable" NO MODIFICABLE
LET         // variable modoficable
            //tipos de variables{
        String "hola",'mundo'   //texto  TAMBIEN LLAMADO CADENA (POR ESO LA SUMA DE PALABRAS ES CONCATENADO)
        Boolean                 // verdadero o falso /binario 1 o 0
        Number              // ovbio mumeros 23 
        Number float:0.23   // coma flotante / numero 
                         // }

                /// TERMINAL ///
console.log   // imprime en la Terminal *util para inspeccionar codigo 

                //fallos
null            //valor nulo 
undefined       //valor infedinido
NaN             //no es un numero / Not a Number


                ///    operaciones ///
          // aritmetica (MATEMATICAS)
        +       //SUMA
        -       //RESTA
        *       //MILTIPLICACION
        /       //dividir
        %       // el resto de una division

                    ///comparadores
//      < >     // mayor/menor que 5>8=false
        <= =>   // menor o igual/mayor o igual        
        ==      //igual pero pueden ser distintos tipos del mismo valor 
        ===     // extrictamente igual de tipo y valor  


                ///     condiciones ///
         if (condition) { //ENTONCES
        // código a ejecutar si la condición es verdadera
        } 
      else {
         // código a ejecutar si la condición es falsa
        }


        
        if (condition1) {
          // código a ejecutar si la condition1 es verdadera
      } else if (condition2) {
          // código a ejecutar si la condition2 es verdadera
      } else {
          // código a ejecutar si ninguna de las condiciones anteriores es verdadera
      }

                    /// logica
        &&  //AND   /Y
        ||  //OR    /ó
        !   //NOT   /no negacion

            //comparadores
        // < >    mayor/menor que 5>8=false
        <= =>    // menor/mayor o igual
        
        ==  //igual pero pueden ser distintos tipos del mismo valor 
        === // extrictamente igual de tipo y valor  


// funciones
     //       function test(){}




let age = prompt('What is your age?');

// Your code below:
console.log(parseInt(age) + 10); /// cambia de string a numero y suma lueeeh


math.random()        leatorio de 0 a 0.9999999999
math.floor()          recorta los decimales  y redondea abajo 
math.ceil()           redondea a lo bruto hacia arriba

        random de 7-12
math.floor(math.random()*6)+7  // emp
